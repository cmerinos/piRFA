# Predicciones por grupo (binario: baseline vs. no-baseline)
pred_df <- do.call(rbind, lapply(groups, function(g) {
group_indicator <- ifelse(g == groups[1], 0, 1)  # baseline = groups[1]
y_pred <- intercept + loading * theta_seq +
direct * group_indicator +
interaction * theta_seq * group_indicator
data.frame(theta = theta_seq, predicted = y_pred, group = as.character(g))
}))
# Etiquetas
if (!is.null(labels)) {
if (length(labels) != length(groups)) {
stop("Length of `labels` debe igualar el número de grupos.")
}
pred_df$group <- factor(pred_df$group, levels = groups, labels = labels)
} else {
pred_df$group <- factor(pred_df$group, levels = groups)
}
# Gráfico
p <- ggplot2::ggplot(pred_df, ggplot2::aes(x = theta, y = predicted, color = group)) +
ggplot2::geom_line(linewidth = 1) +
ggplot2::labs(
title = paste("DIF Profile -", item),
x = "Latent Trait (θ)",
y = "Expected Response",
color = "Group"
) +
theme_option
return(p)
}
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",theta_range = c(0, 4))
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",theta_range = c(0, 4), n_points = 200, baseline = 1)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",theta_range = c(0, 4), n_points = 200, baseline = 2)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",theta_range = c(0, 4), n_points = 200, labels = c("Female", "Male"))
resultado.gender$SEPC[resultado.gender$SEPC$Item == "N4", ]
resultado.gender$SEPC[resultado.gender$SEPC.uDIF$Item == "N4", ]
resultado.gender$SEPC[resultado.gender$SEPC.uDIF$Item == "N4", ]
resultado.gender$SEPC[resultado.gender$SEPC.uDIF$Item , ]
resultado.gender$SEPC
resultado.gender$SEPC.uDIF[resultado.gender$SEPC.uDIF$Item , ]
resultado.gender$SEPC.uDIF
resultado.gender$DIF.Global
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
theta_range = c(0, 4),
n_points = 200,
labels = c("Female", "Male"), use_fit_par = T)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
theta_range = c(0, 4),
n_points = 200,
labels = c("Female", "Male"), use_fit_par = F)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
theta_range = c(-3, 3),
n_points = 200,
labels = c("Female", "Male"), use_fit_par = F)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
theta_range = c(-3, 3),
n_points = 200,
labels = c("Female", "Male"), use_fit_par = T)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
theta_range = c(-3, 3),
n_points = 200,
labels = c("Female", "Male"), use_fit_par = T)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
theta_range = c(-3, 3),
n_points = 200,
labels = c("Female", "Male"), use_fit_par = F)
#' @param item Nombre del ítem (char).
#' @param cov Nombre de la covariable/grupo (char).
#' @param theta_range Rango de θ (por defecto c(-3, 3)).
#' @param n_points Puntos de evaluación en θ (200).
#' @param theme_option Tema ggplot2.
#' @param baseline (opcional) valor de `cov` que será el grupo de referencia (0).
#' @param labels (opcional) vector de etiquetas para los grupos (mismo largo que #grupos).
#' @param use_fit_par Si TRUE, lee intercept y loading del objeto lavaan en `resultados$fit`.
#'
#' @return Objeto ggplot2.
piRFA.profile <- function(resultados, data, item, cov,
thetaRange = c(-3, 3),
nPoints = 200,
themeOption = ggplot2::theme_minimal(),
labels = NULL,
parType = c("none", "unstd", "std")) {
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("Package 'ggplot2' is required.")
}
parType <- match.arg(parType)
groups <- unique(data[[cov]])
if (length(groups) < 2) {
stop("`cov` debe tener al menos 2 niveles.")
}
# --- combinar efectos de DIF ---
sepc_data <- rbind(resultados$SEPC.uDIF, resultados$SEPC.nuDIF)
coefs_item <- sepc_data[sepc_data$Item == item, ]
# efectos DIF
direct      <- coefs_item$EPC[coefs_item$Effect == paste0(cov, "lat")]
interaction <- coefs_item$EPC[grepl(paste0("LFacX", cov), coefs_item$Effect)]
if (length(direct) == 0) direct <- 0
if (length(interaction) == 0) interaction <- 0
# intercepto y loading
intercept <- 0
loading   <- 1
if (parType != "none" && !is.null(resultados$fit)) {
if (requireNamespace("lavaan", quietly = TRUE)) {
pe <- try(lavaan::parameterEstimates(resultados$fit), silent = TRUE)
if (!inherits(pe, "try-error")) {
colToUse <- if (parType == "unstd") "est" else "std.all"
# loading: op = "=~", rhs = item
lrow <- pe[pe$op == "=~" & pe$rhs == item, ]
if (nrow(lrow) > 0 && !is.na(lrow[[colToUse]][1])) {
loading <- lrow[[colToUse]][1]
}
# intercept: op = "~1", lhs = item
irow <- pe[pe$op == "~1" & pe$lhs == item, ]
if (nrow(irow) > 0 && !is.na(irow[[colToUse]][1])) {
intercept <- irow[[colToUse]][1]
}
}
}
}
# Debug
message("Item: ", item,
"\n  Intercept   = ", round(intercept, 4),
"\n  Loading     = ", round(loading, 4),
"\n  Direct      = ", round(direct, 4),
"\n  Interaction = ", round(interaction, 4))
theta_seq <- seq(thetaRange[1], thetaRange[2], length.out = nPoints)
# Predicciones por grupo (referencia = groups[1])
pred_df <- do.call(rbind, lapply(groups, function(g) {
group_indicator <- ifelse(g == groups[1], 0, 1)
y_pred <- intercept + loading * theta_seq +
direct * group_indicator +
interaction * theta_seq * group_indicator
data.frame(theta = theta_seq, predicted = y_pred, group = as.character(g))
}))
# Etiquetas
if (!is.null(labels)) {
if (length(labels) != length(groups)) {
stop("Length of `labels` debe igualar el número de grupos.")
}
pred_df$group <- factor(pred_df$group, levels = groups, labels = labels)
} else {
pred_df$group <- factor(pred_df$group, levels = groups)
}
# Gráfico
p <- ggplot2::ggplot(pred_df, ggplot2::aes(x = theta, y = predicted, color = group)) +
ggplot2::geom_line(linewidth = 1) +
ggplot2::labs(
title = paste("DIF Profile -", item),
x = "Latent Trait (θ)",
y = "Expected Response",
color = "Group"
) +
themeOption
return(p)
}
rm(piRFA.profile)
#' @param item Nombre del ítem (char).
#' @param cov Nombre de la covariable/grupo (char).
#' @param theta_range Rango de θ (por defecto c(-3, 3)).
#' @param n_points Puntos de evaluación en θ (200).
#' @param theme_option Tema ggplot2.
#' @param baseline (opcional) valor de `cov` que será el grupo de referencia (0).
#' @param labels (opcional) vector de etiquetas para los grupos (mismo largo que #grupos).
#' @param use_fit_par Si TRUE, lee intercept y loading del objeto lavaan en `resultados$fit`.
#'
#' @return Objeto ggplot2.
piRFA.profile2 <- function(resultados, data, item, cov,
thetaRange = c(-3, 3),
nPoints = 200,
themeOption = ggplot2::theme_minimal(),
labels = NULL,
parType = c("none", "unstd", "std")) {
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("Package 'ggplot2' is required.")
}
parType <- match.arg(parType)
groups <- unique(data[[cov]])
if (length(groups) < 2) {
stop("`cov` debe tener al menos 2 niveles.")
}
# --- combinar efectos de DIF ---
sepc_data <- rbind(resultados$SEPC.uDIF, resultados$SEPC.nuDIF)
coefs_item <- sepc_data[sepc_data$Item == item, ]
# efectos DIF
direct      <- coefs_item$EPC[coefs_item$Effect == paste0(cov, "lat")]
interaction <- coefs_item$EPC[grepl(paste0("LFacX", cov), coefs_item$Effect)]
if (length(direct) == 0) direct <- 0
if (length(interaction) == 0) interaction <- 0
# intercepto y loading
intercept <- 0
loading   <- 1
if (parType != "none" && !is.null(resultados$fit)) {
if (requireNamespace("lavaan", quietly = TRUE)) {
pe <- try(lavaan::parameterEstimates(resultados$fit), silent = TRUE)
if (!inherits(pe, "try-error")) {
colToUse <- if (parType == "unstd") "est" else "std.all"
# loading: op = "=~", rhs = item
lrow <- pe[pe$op == "=~" & pe$rhs == item, ]
if (nrow(lrow) > 0 && !is.na(lrow[[colToUse]][1])) {
loading <- lrow[[colToUse]][1]
}
# intercept: op = "~1", lhs = item
irow <- pe[pe$op == "~1" & pe$lhs == item, ]
if (nrow(irow) > 0 && !is.na(irow[[colToUse]][1])) {
intercept <- irow[[colToUse]][1]
}
}
}
}
# Debug
message("Item: ", item,
"\n  Intercept   = ", round(intercept, 4),
"\n  Loading     = ", round(loading, 4),
"\n  Direct      = ", round(direct, 4),
"\n  Interaction = ", round(interaction, 4))
theta_seq <- seq(thetaRange[1], thetaRange[2], length.out = nPoints)
# Predicciones por grupo (referencia = groups[1])
pred_df <- do.call(rbind, lapply(groups, function(g) {
group_indicator <- ifelse(g == groups[1], 0, 1)
y_pred <- intercept + loading * theta_seq +
direct * group_indicator +
interaction * theta_seq * group_indicator
data.frame(theta = theta_seq, predicted = y_pred, group = as.character(g))
}))
# Etiquetas
if (!is.null(labels)) {
if (length(labels) != length(groups)) {
stop("Length of `labels` debe igualar el número de grupos.")
}
pred_df$group <- factor(pred_df$group, levels = groups, labels = labels)
} else {
pred_df$group <- factor(pred_df$group, levels = groups)
}
# Gráfico
p <- ggplot2::ggplot(pred_df, ggplot2::aes(x = theta, y = predicted, color = group)) +
ggplot2::geom_line(linewidth = 1) +
ggplot2::labs(
title = paste("DIF Profile -", item),
x = "Latent Trait (θ)",
y = "Expected Response",
color = "Group"
) +
themeOption
return(p)
}
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
theta_range = c(-3, 3),
n_points = 200,
labels = c("Female", "Male"), use_fit_par = F)
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none")
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "unstd")
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "std")
piRFA.profile2 <- function(resultados, data, item, cov,
thetaRange = c(-3, 3),
nPoints = 200,
themeOption = ggplot2::theme_minimal(),
labels = NULL,
parType = c("none", "unstd", "std")) {
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("Package 'ggplot2' is required.")
}
parType <- match.arg(parType)
groups <- unique(data[[cov]])
if (length(groups) < 2) stop("`cov` debe tener al menos 2 niveles.")
# -------- DIF effects (uDIF / nuDIF) --------
if (is.null(resultados$SEPC.uDIF) && is.null(resultados$SEPC.nuDIF)) {
stop("No se encontraron `SEPC.uDIF` ni `SEPC.nuDIF` en `resultados`.")
}
sepc_data <- rbind(resultados$SEPC.uDIF, resultados$SEPC.nuDIF)
coefs_item <- sepc_data[sepc_data$Item == item, , drop = FALSE]
# Elegir columna para los efectos DIF según parType
sepc_col <- if (parType == "std" && "SEPC.ALL" %in% names(coefs_item)) "SEPC.ALL" else "EPC"
if (parType == "std" && sepc_col != "SEPC.ALL") {
warning("SEPC.ALL no disponible; usando EPC (no estandarizado) para efectos DIF.")
}
direct      <- coefs_item[[sepc_col]][coefs_item$Effect == paste0(cov, "lat")]
interaction <- coefs_item[[sepc_col]][grepl(paste0("LFacX", cov), coefs_item$Effect)]
if (length(direct) == 0)      direct <- 0
if (length(interaction) == 0) interaction <- 0
# -------- Intercept & Loading --------
intercept <- 0
loading   <- 1
if (parType != "none" && !is.null(resultados$fit) && requireNamespace("lavaan", quietly = TRUE)) {
pe <- try(lavaan::parameterEstimates(resultados$fit, standardized = TRUE), silent = TRUE)
if (!inherits(pe, "try-error")) {
get1 <- function(x) if (length(x) > 0) x[1] else NA_real_
# loading
lrow <- pe[pe$op == "=~" & pe$rhs == item, , drop = FALSE]
if (nrow(lrow) > 0) {
if (parType == "std") {
val_std <- get1(lrow$std.all)
if (!is.na(val_std)) {
loading <- val_std
} else {
val_un  <- get1(lrow$est)
if (!is.na(val_un)) {
loading <- val_un
warning("Loading std.all es NA; se usó 'est' (no estandarizado).")
}
}
} else { # unstd
val_un <- get1(lrow$est)
if (!is.na(val_un)) loading <- val_un
}
}
# intercept
irow <- pe[pe$op == "~1" & pe$lhs == item, , drop = FALSE]
if (nrow(irow) > 0) {
if (parType == "std") {
# Por convención, intercepto estandarizado = 0 si std.all es NA
val_std <- get1(irow$std.all)
if (!is.na(val_std)) {
intercept <- val_std
} else {
intercept <- 0
message("Intercepto std.all no definido; se fijó en 0 (métrica estandarizada).")
}
} else { # unstd
val_un <- get1(irow$est)
if (!is.na(val_un)) intercept <- val_un
}
}
}
}
# -------- Debug --------
message("Item: ", item,
"\n  Intercept   = ", round(intercept, 4),
"\n  Loading     = ", round(loading, 4),
"\n  Direct      = ", round(direct, 4),
"\n  Interaction = ", round(interaction, 4),
"\n  parType     = ", parType)
# -------- Predicciones --------
theta_seq <- seq(thetaRange[1], thetaRange[2], length.out = nPoints)
pred_df <- do.call(rbind, lapply(groups, function(g) {
group_indicator <- ifelse(g == groups[1], 0, 1)
y_pred <- intercept + loading * theta_seq +
direct * group_indicator +
interaction * theta_seq * group_indicator
data.frame(theta = theta_seq, predicted = y_pred, group = as.character(g))
}))
# Etiquetas
if (!is.null(labels)) {
if (length(labels) != length(groups)) stop("Length de `labels` debe igualar # de grupos.")
pred_df$group <- factor(pred_df$group, levels = groups, labels = labels)
} else {
pred_df$group <- factor(pred_df$group, levels = groups)
}
# -------- Plot --------
p <- ggplot2::ggplot(pred_df, ggplot2::aes(x = theta, y = predicted, color = group)) +
ggplot2::geom_line(linewidth = 1) +
ggplot2::labs(
title = paste("DIF Profile -", item),
x = "Latent Trait (θ)",
y = "Expected Response",
color = "Group"
) +
themeOption
return(p)
}
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "std")
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "unstd")
piRFA.profile2(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none")
devtools::document()
rm(piRFA.profile2)
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none")
devtools::document()
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none")
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = theme_classic())
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = "theme_classic()")
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = theme_classic())
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = theme_classic)
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = "theme_classic")
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = "theme_classic()")
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = theme_classic())
devtools::document()
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = theme_classic)
piRFA.profile(resultados = resultado.gender,
data = data.bfi,
item = "N1",
cov = "gender",
thetaRange = c(-3, 3),
nPoints = 200,
labels = c("Female", "Male"),parType = "none", themeOption = "theme_classic")
devtools::document()
